# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/refs/tags/3.1.1/schemas/v3.1/schema.yaml
openapi: 3.1.0
info:
  title: User Service API
  description: API for user management in blog microservice system
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

tags:
  - name: Users
    description: User management endpoints
  - name: Authentication
    description: Authentication related endpoints

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieves a paginated list of users
      tags:
        - Users
      operationId: listUsers
      parameters:
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/ServerError'
          
    post:
      summary: Create a new user
      description: Creates a new user account
      tags:
        - Users
      operationId: createUser
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserCreate'
    responses:
      '201':
        description: User created successfully
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        $ref: '#/components/responses/BadRequest'
      '409':
        description: User with email already exists
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Error'
      '500':
        $ref: '#/components/responses/ServerError'

  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: ID of the user
        schema:
          type: string
          format: uuid
    get:
      summary: Get user by ID
      description: Retrieves a specific user by their ID
      tags:
        - Users
      operationId: lookupUserById
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update user
      description: Updates an existing user's information
      tags:
        - Users
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete user
      description: Deletes a user account
      tags:
        - Users
      operationId: deleteUser
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/me:
    get:
      summary: Get current user
      description: Retrieves the currently authenticated user's information
      tags:
        - Users
      operationId: getCurrentUser
      responses:
        '200':
          description: Current user retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      summary: Update current user
      description: Updates the currently authenticated user's information
      tags:
        - Users
      operationId: updateCurrentUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      summary: User login
      description: Authenticates a user and returns access token
      tags:
        - Authentication
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/logout:
    post:
      summary: User logout
      description: Invalidates the current session/token
      tags:
        - Authentication
      operationId: logoutUser
      responses:
        '204':
          description: Logged out successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/refresh:
    post:
      summary: Refresh token
      description: Refreshes the access token using refresh token
      tags:
        - Authentication
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/password-reset:
    post:
      summary: Request password reset
      description: Sends password reset instructions to user's email
      tags:
        - Authentication
      operationId: requestPasswordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
      responses:
        '204':
          description: Password reset email sent
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'
  /auth/password-reset/{token}:
    post:
      summary: Reset password
      description: Resets user's password using the reset token
      tags:
        - Authentication
      operationId: resetPassword
      parameters:
        - name: token
          in: path
          required: true
          description: Password reset token
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmation'
      responses:
        '204':
          description: Password reset successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: User's username
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        role:
          type: string
          enum: [user, admin, editor]
          description: User's role in the system
        status:
          type: string
          enum: [active, inactive, pending, banned]
          description: User's account status
        createdAt:
          type: string
          format: date-time
          description: When the user account was created
        updatedAt:
          type: string
          format: date-time
          description: When the user account was last updated
      required:
        - id
        - email
        - username
        - role
        - status
        - createdAt
        - updatedAt
    
    UserList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pagination:
          type: object
          properties:
            total:
              type: integer
              description: Total number of users
            pages:
              type: integer
              description: Total number of pages
            currentPage:
              type: integer
              description: Current page number
            limit:
              type: integer
              description: Number of items per page
      required:
        - data
        - pagination

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: User's username
        password:
          type: string
          format: password
          description: User's password
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
      required:
        - email
        - username
        - password

    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: User's username
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        password:
          type: string
          format: password
          description: User's new password
        currentPassword:
          type: string
          format: password
          description: User's current password (required when changing password)
      required:
        - currentPassword

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token for obtaining new access tokens
        tokenType:
          type: string
          description: Type of token, typically 'Bearer'
          default: Bearer
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        user:
          $ref: '#/components/schemas/User'
      required:
        - accessToken
        - refreshToken
        - tokenType
        - expiresIn
        - user

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token from previous authentication
      required:
        - refreshToken

    PasswordResetRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: The email address of the account to reset
      required:
        - email

    PasswordResetConfirmation:
      type: object
      properties:
        newPassword:
          type: string
          format: password
          description: New password to set
        confirmPassword:
          type: string
          format: password
          description: Confirm the new password
      required:
        - newPassword
        - confirmPassword

    Error:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        status:
          type: string
        error:
          type: string
      required:
        - statusCode
        - status

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authorization header using the Bearer scheme

security:
  - bearerAuth: []
