// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for UserRole.
const (
	UserRoleAdmin UserRole = "admin"
	UserRoleUser  UserRole = "user"
)

// Defines values for UserStatus.
const (
	UserStatusActive  UserStatus = "active"
	UserStatusBanned  UserStatus = "banned"
	UserStatusPending UserStatus = "pending"
)

// Defines values for UserUpdateRole.
const (
	UserUpdateRoleAdmin UserUpdateRole = "admin"
	UserUpdateRoleUser  UserUpdateRole = "user"
)

// Defines values for UserUpdateStatus.
const (
	UserUpdateStatusActive  UserUpdateStatus = "active"
	UserUpdateStatusBanned  UserUpdateStatus = "banned"
	UserUpdateStatusPending UserUpdateStatus = "pending"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"accessToken"`

	// ExpiresIn Token expiration time in seconds
	ExpiresIn int `json:"expiresIn"`

	// RefreshToken JWT refresh token
	RefreshToken string `json:"refreshToken"`
}

// Error defines model for Error.
type Error struct {
	Error      *string `json:"error,omitempty"`
	Status     string  `json:"status"`
	StatusCode int32   `json:"statusCode"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// Password User's password
	Password string `json:"password"`
}

// PasswordResetConfirmation defines model for PasswordResetConfirmation.
type PasswordResetConfirmation struct {
	// ConfirmPassword Confirm the new password
	ConfirmPassword string `json:"confirmPassword"`

	// NewPassword New password to set
	NewPassword string `json:"newPassword"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	// Email The email address of the account to reset
	Email openapi_types.Email `json:"email"`
}

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	// RefreshToken JWT refresh token
	RefreshToken string `json:"refreshToken"`
}

// User defines model for User.
type User struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name
	FirstName string `json:"firstName"`

	// Id Unique identifier for the user
	Id openapi_types.UUID `json:"id"`

	// LastName User's last name
	LastName string `json:"lastName"`

	// Role User's role in the system
	Role UserRole `json:"role"`

	// Status User's account status
	Status UserStatus `json:"status"`
}

// UserRole User's role in the system
type UserRole string

// UserStatus User's account status
type UserStatus string

// UserCreate defines model for UserCreate.
type UserCreate struct {
	// Email User's email address
	Email openapi_types.Email `json:"email"`

	// FirstName User's first name
	FirstName string `json:"firstName"`

	// LastName User's last name
	LastName string `json:"lastName"`

	// Password User's password
	Password string `json:"password"`
}

// UserUpdate defines model for UserUpdate.
type UserUpdate struct {
	// Email User's email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName User's first name
	FirstName *string `json:"firstName,omitempty"`

	// LastName User's last name
	LastName *string `json:"lastName,omitempty"`

	// Role User's role in the system
	Role *UserUpdateRole `json:"role,omitempty"`

	// Status User's account status
	Status *UserUpdateStatus `json:"status,omitempty"`
}

// UserUpdateRole User's role in the system
type UserUpdateRole string

// UserUpdateStatus User's account status
type UserUpdateStatus string

// UserUpdateCurrent defines model for UserUpdateCurrent.
type UserUpdateCurrent struct {
	// CurrentPassword User's current password (required when changing password)
	CurrentPassword string `json:"currentPassword"`

	// Email User's email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName User's first name
	FirstName *string `json:"firstName,omitempty"`

	// LastName User's last name
	LastName *string `json:"lastName,omitempty"`

	// Password User's new password
	Password *string `json:"password,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ServerError defines model for ServerError.
type ServerError = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = LoginRequest

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody = PasswordResetRequest

// ResetPasswordJSONRequestBody defines body for ResetPassword for application/json ContentType.
type ResetPasswordJSONRequestBody = PasswordResetConfirmation

// RefreshTokenJSONRequestBody defines body for RefreshToken for application/json ContentType.
type RefreshTokenJSONRequestBody = RefreshTokenRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreate

// UpdateCurrentUserJSONRequestBody defines body for UpdateCurrentUser for application/json ContentType.
type UpdateCurrentUserJSONRequestBody = UserUpdateCurrent

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UserUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /auth/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// User logout
	// (POST /auth/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Request password reset
	// (POST /auth/password-reset)
	RequestPasswordReset(w http.ResponseWriter, r *http.Request)
	// Reset password
	// (POST /auth/password-reset/{token})
	ResetPassword(w http.ResponseWriter, r *http.Request, token string)
	// Refresh access token
	// (POST /auth/refresh)
	RefreshToken(w http.ResponseWriter, r *http.Request)
	// Verify user account
	// (GET /auth/verify/{token})
	VerifyAccount(w http.ResponseWriter, r *http.Request, token string)
	// Get all users
	// (GET /users)
	ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams)
	// Create a new user
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Get current user
	// (GET /users/me)
	GetCurrentUser(w http.ResponseWriter, r *http.Request)
	// Update current user
	// (PUT /users/me)
	UpdateCurrentUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /users/{userId})
	DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Get user by ID
	// (GET /users/{userId})
	LookupUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Update user
	// (PUT /users/{userId})
	UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// User login
// (POST /auth/login)
func (_ Unimplemented) LoginUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// User logout
// (POST /auth/logout)
func (_ Unimplemented) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Request password reset
// (POST /auth/password-reset)
func (_ Unimplemented) RequestPasswordReset(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Reset password
// (POST /auth/password-reset/{token})
func (_ Unimplemented) ResetPassword(w http.ResponseWriter, r *http.Request, token string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Refresh access token
// (POST /auth/refresh)
func (_ Unimplemented) RefreshToken(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Verify user account
// (GET /auth/verify/{token})
func (_ Unimplemented) VerifyAccount(w http.ResponseWriter, r *http.Request, token string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get all users
// (GET /users)
func (_ Unimplemented) ListUsers(w http.ResponseWriter, r *http.Request, params ListUsersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new user
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get current user
// (GET /users/me)
func (_ Unimplemented) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update current user
// (PUT /users/me)
func (_ Unimplemented) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete user
// (DELETE /users/{userId})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get user by ID
// (GET /users/{userId})
func (_ Unimplemented) LookupUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update user
// (PUT /users/{userId})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RequestPasswordReset operation middleware
func (siw *ServerInterfaceWrapper) RequestPasswordReset(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RequestPasswordReset(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ResetPassword operation middleware
func (siw *ServerInterfaceWrapper) ResetPassword(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", chi.URLParam(r, "token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResetPassword(w, r, token)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// RefreshToken operation middleware
func (siw *ServerInterfaceWrapper) RefreshToken(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshToken(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// VerifyAccount operation middleware
func (siw *ServerInterfaceWrapper) VerifyAccount(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "token" -------------
	var token string

	err = runtime.BindStyledParameterWithOptions("simple", "token", chi.URLParam(r, "token"), &token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "token", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyAccount(w, r, token)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"all-users:r"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsersParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListUsers(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrentUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateCurrentUser(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"all-users:write"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupUser operation middleware
func (siw *ServerInterfaceWrapper) LookupUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"all-users:read"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{"all-users:write"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, userId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/password-reset", wrapper.RequestPasswordReset)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/password-reset/{token}", wrapper.ResetPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/refresh", wrapper.RefreshToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/verify/{token}", wrapper.VerifyAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.ListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/me", wrapper.GetCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/me", wrapper.UpdateCurrentUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{userId}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{userId}", wrapper.LookupUser)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{userId}", wrapper.UpdateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
