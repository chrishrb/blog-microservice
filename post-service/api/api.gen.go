// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Comment defines model for Comment.
type Comment struct {
	AuthorId string `json:"authorId"`
	Content  string `json:"content"`
	Id       string `json:"id"`
}

// CommentCreate defines model for CommentCreate.
type CommentCreate struct {
	AuthorId string `json:"authorId"`
	Content  string `json:"content"`
}

// CommentUpdate defines model for CommentUpdate.
type CommentUpdate struct {
	AuthorId *string `json:"authorId,omitempty"`
	Content  *string `json:"content,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error      *string `json:"error,omitempty"`
	Status     string  `json:"status"`
	StatusCode int32   `json:"statusCode"`
}

// Post defines model for Post.
type Post struct {
	AuthorId  string    `json:"authorId"`
	Content   string    `json:"content"`
	Id        string    `json:"id"`
	Published bool      `json:"published"`
	Tags      *[]string `json:"tags,omitempty"`
	Title     string    `json:"title"`
}

// PostCreate defines model for PostCreate.
type PostCreate struct {
	AuthorId  string    `json:"authorId"`
	Content   string    `json:"content"`
	Published *bool     `json:"published,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
	Title     string    `json:"title"`
}

// PostUpdate defines model for PostUpdate.
type PostUpdate struct {
	AuthorId  *string   `json:"authorId,omitempty"`
	Content   *string   `json:"content,omitempty"`
	Published *bool     `json:"published,omitempty"`
	Tags      *[]string `json:"tags,omitempty"`
	Title     *string   `json:"title,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// ListPostsParams defines parameters for ListPosts.
type ListPostsParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListCommentsParams defines parameters for ListComments.
type ListCommentsParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreatePostJSONRequestBody defines body for CreatePost for application/json ContentType.
type CreatePostJSONRequestBody = PostCreate

// UpdatePostJSONRequestBody defines body for UpdatePost for application/json ContentType.
type UpdatePostJSONRequestBody = PostUpdate

// CreateCommentJSONRequestBody defines body for CreateComment for application/json ContentType.
type CreateCommentJSONRequestBody = CommentCreate

// UpdateCommentJSONRequestBody defines body for UpdateComment for application/json ContentType.
type UpdateCommentJSONRequestBody = CommentUpdate

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all posts
	// (GET /posts)
	ListPosts(w http.ResponseWriter, r *http.Request, params ListPostsParams)
	// Create a new post
	// (POST /posts)
	CreatePost(w http.ResponseWriter, r *http.Request)
	// Delete a post
	// (DELETE /posts/{id})
	DeletePost(w http.ResponseWriter, r *http.Request, id string)
	// Get a post by ID
	// (GET /posts/{id})
	LookupPost(w http.ResponseWriter, r *http.Request, id string)
	// Update a post
	// (PUT /posts/{id})
	UpdatePost(w http.ResponseWriter, r *http.Request, id string)
	// List all comments for a post
	// (GET /posts/{postId}/comments)
	ListComments(w http.ResponseWriter, r *http.Request, postId string, params ListCommentsParams)
	// Create a new comment
	// (POST /posts/{postId}/comments)
	CreateComment(w http.ResponseWriter, r *http.Request, postId string)
	// Delete a comment
	// (DELETE /posts/{postId}/comments/{id})
	DeleteComment(w http.ResponseWriter, r *http.Request, postId string, id string)
	// Get a comment by ID
	// (GET /posts/{postId}/comments/{id})
	LookupComment(w http.ResponseWriter, r *http.Request, postId string, id string)
	// Update a comment
	// (PUT /posts/{postId}/comments/{id})
	UpdateComment(w http.ResponseWriter, r *http.Request, postId string, id string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List all posts
// (GET /posts)
func (_ Unimplemented) ListPosts(w http.ResponseWriter, r *http.Request, params ListPostsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new post
// (POST /posts)
func (_ Unimplemented) CreatePost(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a post
// (DELETE /posts/{id})
func (_ Unimplemented) DeletePost(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a post by ID
// (GET /posts/{id})
func (_ Unimplemented) LookupPost(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a post
// (PUT /posts/{id})
func (_ Unimplemented) UpdatePost(w http.ResponseWriter, r *http.Request, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List all comments for a post
// (GET /posts/{postId}/comments)
func (_ Unimplemented) ListComments(w http.ResponseWriter, r *http.Request, postId string, params ListCommentsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new comment
// (POST /posts/{postId}/comments)
func (_ Unimplemented) CreateComment(w http.ResponseWriter, r *http.Request, postId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a comment
// (DELETE /posts/{postId}/comments/{id})
func (_ Unimplemented) DeleteComment(w http.ResponseWriter, r *http.Request, postId string, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a comment by ID
// (GET /posts/{postId}/comments/{id})
func (_ Unimplemented) LookupComment(w http.ResponseWriter, r *http.Request, postId string, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a comment
// (PUT /posts/{postId}/comments/{id})
func (_ Unimplemented) UpdateComment(w http.ResponseWriter, r *http.Request, postId string, id string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListPosts operation middleware
func (siw *ServerInterfaceWrapper) ListPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPostsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListPosts(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreatePost operation middleware
func (siw *ServerInterfaceWrapper) CreatePost(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreatePost(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeletePost operation middleware
func (siw *ServerInterfaceWrapper) DeletePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupPost operation middleware
func (siw *ServerInterfaceWrapper) LookupPost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupPost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdatePost operation middleware
func (siw *ServerInterfaceWrapper) UpdatePost(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePost(w, r, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// ListComments operation middleware
func (siw *ServerInterfaceWrapper) ListComments(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCommentsParams

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListComments(w, r, postId, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateComment operation middleware
func (siw *ServerInterfaceWrapper) CreateComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateComment(w, r, postId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteComment operation middleware
func (siw *ServerInterfaceWrapper) DeleteComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteComment(w, r, postId, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// LookupComment operation middleware
func (siw *ServerInterfaceWrapper) LookupComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LookupComment(w, r, postId, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateComment operation middleware
func (siw *ServerInterfaceWrapper) UpdateComment(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "postId" -------------
	var postId string

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", chi.URLParam(r, "id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateComment(w, r, postId, id)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts", wrapper.ListPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts", wrapper.CreatePost)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{id}", wrapper.DeletePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{id}", wrapper.LookupPost)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/posts/{id}", wrapper.UpdatePost)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/comments", wrapper.ListComments)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/posts/{postId}/comments", wrapper.CreateComment)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/posts/{postId}/comments/{id}", wrapper.DeleteComment)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/posts/{postId}/comments/{id}", wrapper.LookupComment)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/posts/{postId}/comments/{id}", wrapper.UpdateComment)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYTW/jNhD9KwTboxA72fSiU3ezbWEgKIJd9BTkQEsjh1t+LUmlMQz994KkREsW/VXY",
	"TlDsKbYozgzfPL558QoXkispQFiD8xXWYJQUBvyXT6T8At9rMNZ9K6SwIPxHohSjBbFUisk3I4V7Zopn",
	"4MR9+llDhXP802QdehJWzeQ3raXGTdNkuARTaKpcEJy7XEi3yZoMz4QFLQj7CvoFdNh19hq6pMj4rAjC",
	"ixn+U9rfZS3K85fwBYysdQFISIsqn9O91O5zYe8k521+paUCbWnoFqnts9QzX6RdKsA5NlZTsXAn6FU9",
	"WqOpLU2GXTuohhLnj+6dbJ1hHe8p6zbK+TcofO/aCu80EAsnq3OjoONq+UuVJ65llClydJgBusej8MYS",
	"W5sdS3ey9CVXUnNicY6psB9ucMxNhYUF6BE0vd0xSwqbB2nOTqMMq3rOqHkGv1pCRWpmcV4RZiDWNJeS",
	"ARHudUsWvgxqgafBaR8QrcnSf6eWwfEMDtvWR+pXug2tE1P6/YCzA5dtWJz4Sr0tFhsndI+oqGSn96Tw",
	"JQMnlLmNtVJS21/hlXDF4KqQHGdYEO5ifHyYoa/hBTySd7dYSY04EWRBxQLNmVwgJY01iIgSFUGuTOxD",
	"7rFGbgzSAtDHhxnO8AtoE+JdX02vpi6NVCCIojjHH/yjDCtinz0uEx/efVqADdgOJ47VFF4AEcSosUhW",
	"iDAWasI+sPYTznUU31NjH9oVRTThYEEbnD+uMHXBvtegl2ssZFUZcFdrPRVjY6cZ5lRQXnP/eaxp6ZCM",
	"crol4o0LSV5DyOtpP8F1IsFTNnQ7N9PpUfM9Em/XoPcaO+LieO7ft9AHKui2JyUydVGAMVXNmOfwL6HI",
	"VMp4mEnKPHkXUXNO9LJL129zuE2PODT3yV3HdjoMCRAU0J8qKAgY+0mWy5M5o57MNkOVsrqGZtSz65Nm",
	"TrXGX8DClzTux+0h/ej56NO1MICECBLwj2+jXw+XfbKiZRPuBoMg0sMzffbPEUFGQUErWvgIaL5E1Bo0",
	"+zy6+GFD7PugBbfj+B6zkDyF2e1+AKLlPh1i8dAqHGPM+X0CeSha91L+Xas0WtPLEHa7hLwV/H+AbbF3",
	"yHnUEqqTGCpukq0HgPdxQ1XoT4PN2f7kjEWiq8G+ICIQvFJj3SxuaTFsZXjvzILXeqmDBO9C/Kl9SScR",
	"vLciXNfibfe9J5fuz6xsJtF/HemWun3e3G3oRNJE3a2N3g8fdYCP6n71OMJKxZ5czk1t0GCDd7Hnhwld",
	"4OTRYtfatiEmA7PQVnkQV8PGDv3zKODw96ILu75IrDGR2qX37v2K2JwE0XZo3H8wiR1z9vnEPl/2WcUO",
	"5XfrFnfie4Rn3A9esI1bwZtekvTv1T/2UBxYyPOLa3ZhO7rmXcqRXkSS38aXHsDO/5M73a3f8ZfOx1X6",
	"3zzmgQBRKkmDoWyZGWyuo20SQ7Nrb6ygeWr+DQAA///Q1OVYIxwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
